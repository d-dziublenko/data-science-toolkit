# Continuous Integration workflow that runs on every push and pull request
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"

jobs:
  # Code quality checks (without formatting enforcement)
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy isort

      # Note: Removed Black formatting check
      # You can still use Black locally for consistency, but it won't block CI

      - name: Check import sorting with isort
        run: isort --check-only .
        continue-on-error: true # Make this a non-blocking check

      - name: Lint with flake8
        run: |
          # Create a more lenient flake8 config if it doesn't exist
          if [ ! -f .flake8 ]; then
            echo "[flake8]" > .flake8
            echo "max-line-length = 120" >> .flake8
            echo "extend-ignore = E203, W503, E501" >> .flake8
            echo "exclude = .git,__pycache__,build,dist,venv,env,.tox,*.egg" >> .flake8
          fi
          flake8 . --config=.flake8

      - name: Type checking with mypy
        run: |
          # Create mypy config if it doesn't exist
          if [ ! -f mypy.ini ]; then
            echo "[mypy]" > mypy.ini
            echo "python_version = 3.9" >> mypy.ini
            echo "warn_return_any = True" >> mypy.ini
            echo "warn_unused_configs = True" >> mypy.ini
            echo "ignore_missing_imports = True" >> mypy.ini
            echo "no_implicit_optional = True" >> mypy.ini
            echo "warn_redundant_casts = True" >> mypy.ini
            echo "warn_unused_ignores = True" >> mypy.ini
          fi
          mypy . --config-file=mypy.ini || true  # Non-blocking for now

  # Run tests across multiple Python versions and OS
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          - os: macos-latest
            python-version: "3.8"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-core.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=data-science-toolkit --cov-report=xml --cov-report=html -n auto

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Build and test Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ds-toolkit:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ds-toolkit:test python -c "import pandas, numpy, sklearn; print('Docker test passed')"
