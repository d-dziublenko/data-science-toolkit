name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"

jobs:
  # Code quality checks with detailed feedback
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort

      - name: Check code formatting with Black
        id: black-check
        run: |
          # First, show which files would be reformatted
          echo "::group::Files that need formatting"
          black --check --diff . 2>&1 || true
          echo "::endgroup::"

          # Then run the actual check
          black --check . || exit_code=$?

          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "::error::Black found files that need formatting. Run 'black .' locally to fix."
            echo "### Black Formatting Required" >> $GITHUB_STEP_SUMMARY
            echo "The following files need to be formatted:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            black --check . 2>&1 | grep "would reformat" | sed 's/would reformat /- /' >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To fix this locally, run:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo 'pip install black' >> $GITHUB_STEP_SUMMARY
            echo 'black .' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Format check passed
        if: success()
        run: |
          echo "✅ All files are properly formatted with Black!" >> $GITHUB_STEP_SUMMARY

      - name: Check import sorting with isort
        id: isort-check
        run: |
          # Show which files need import sorting
          echo "::group::Files that need import sorting"
          isort --check-only --diff . 2>&1 || true
          echo "::endgroup::"

          # Run the check
          isort --check-only . || exit_code=$?

          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "::error::isort found files with incorrectly sorted imports. Run 'isort .' locally to fix."
            echo "### Import Sorting Required" >> $GITHUB_STEP_SUMMARY
            echo "Run 'isort .' locally to fix import ordering." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Lint with flake8
        id: flake8-check
        run: |
          # Create flake8 config if it doesn't exist
          if [ ! -f .flake8 ]; then
            echo "[flake8]" > .flake8
            echo "max-line-length = 100" >> .flake8
            echo "extend-ignore = E203, W503" >> .flake8
            echo "exclude = .git,__pycache__,build,dist,venv,env,.tox" >> .flake8
          fi

          # Run flake8 with detailed output
          flake8 . --config=.flake8 --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s' || exit_code=$?

          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "### Flake8 Linting Errors" >> $GITHUB_STEP_SUMMARY
            echo "Fix the linting errors reported above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Type checking with mypy
        id: mypy-check
        run: |
          # Create basic mypy config if it doesn't exist
          if [ ! -f mypy.ini ]; then
            echo "[mypy]" > mypy.ini
            echo "python_version = 3.9" >> mypy.ini
            echo "warn_return_any = True" >> mypy.ini
            echo "warn_unused_configs = True" >> mypy.ini
            echo "ignore_missing_imports = True" >> mypy.ini
          fi

          # Run mypy
          mypy . --config-file=mypy.ini || exit_code=$?

          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "### MyPy Type Checking Errors" >> $GITHUB_STEP_SUMMARY
            echo "Fix the type checking errors reported above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Formatting helper job (optional - can be triggered manually)
  auto-format:
    name: Auto-format Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Format code
        run: |
          black .
          isort .

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "style: auto-format code with black and isort"
          git push

      - name: Comment on PR
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✨ I\'ve automatically formatted the code in this PR using Black and isort. Please pull the latest changes.'
            })

  # Rest of your existing test and security jobs...
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          - os: macos-latest
            python-version: "3.8"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-core.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=data-science-toolkit --cov-report=xml --cov-report=html -n auto

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
